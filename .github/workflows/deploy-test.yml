name: deploy-test

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    permissions: 
      contents: write
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Instalar .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0' 

      - name: Restaurar dependências
        run: dotnet restore CarteiradeContatos.sln

      - name: Construir projeto
        run: dotnet build CarteiradeContatos.sln --configuration Release

      - name: Executar testes unitários
        run: dotnet test TestProject/TestProject.csproj --configuration Release

      - name: Publicar projeto
        run: dotnet publish CarteiradeContatos/CarteiradeContatos.csproj -c Release -o ${{ github.workspace }}/publish

      - name: Criar release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false
          
      - name: Verificar sucesso da criação do release
        if: steps.create_release.outcome == 'success'
        run: echo "Criação do release bem-sucedida!"

      - name: Zipar artefato
        uses: thedoctor0/zip-release@master
        with:
          filename: ${{ github.workspace }}\CarteiradeContatos.zip
          directory: ${{ github.workspace }}\publish

      - name: Fazer upload do artefato
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\CarteiradeContatos.zip
          asset_name: CarteiradeContatos.zip
          asset_content_type: application/zip
          
      - name: Verificar sucesso da criação do zip
        if: always() || steps.create_release.outputs.upload_url == 'success'
        run: echo "Criação do zip bem-sucedida!"
          
      - name: Echo
        if: always()
        run: echo "${{ github.workspace }}"


  deploy:
    needs: build
    runs-on: windows-latest
    environment:
      name: test
      url: ${{ steps.deploy_to_azure.outputs.webapp_url }}
    permissions:
      deployments: write
      packages: write
      actions: write
      contents: write
    steps:        
       - name: Download Release Asset
         id: download_release
         uses: actions/github-script@v1
         with:
           script: |
             const { owner, repo } = context.repo;
             const release_tag = '${github.event.release.tag_name}'; 
             const asset_name = 'CarteiradeContatos.zip'; 
              const release = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: release_tag,
              });
             const asset = release.data.assets.find(asset => asset.name === asset_name);
             if (!asset) {
               core.setFailed(`Asset ${asset_name} not found in release ${release_tag}`);
               return;
            }
             const response = await github.request({
              method: 'GET',
              url: asset.url,
              headers: {
                Accept: 'application/octet-stream'
              },
            });
            fs.writeFileSync(asset_name, Buffer.from(response.data));
            core.setOutput('asset_path', asset_name);
            
      - name: Release
        if: always()
        run: echo "Tag Release= ${{ github.event.release.tag_name }}"
      
      - name: Deploy to Azure Web App
        id: deploy_to_azure
        uses: azure/webapps-deploy@v1
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}\CarteiradeContatos.zip
          
      - name: Listar conteúdo do diretório de trabalho
        if: always()
        run: dir ${{ github.workspace }} 

      - name: Depurar caminho do pacote
        if: always()
        run: echo "Caminho do pacote= ${{ github.workspace }}\CarteiradeContatos.zip"
          
  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Enviar notificação de falha
        uses: dawidd6/action-send-mail@v1
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Falha no pipeline de CI/CD .NET
          to: victorbm336@hotmail.com
          from: ${{secrets.MAIL_USERNAME}}
          body: O pipeline de CI/CD falhou na etapa ${{ github.job }}. Veja os logs para mais detalhes. ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
